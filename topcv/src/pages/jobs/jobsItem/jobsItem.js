import { useEffect, useState } from "react";
import "./jobsItem.css";
import { useParams, useNavigate } from "react-router-dom";
import { createJobsId } from "../../../services/jobs";
import { Helmet } from "react-helmet-async";
import { postJobApplication } from "../../../services/jobApplication";
import NotificationBox from "../../../Notification/admin/Notification";

function JobsItemId({ title }) {
  const { id } = useParams();
  const navigate = useNavigate();

  const [job, setJob] = useState(null);
  const [userApply, setUserApply] = useState(null);
  const [showApplyModal, setShowApplyModal] = useState(false);
  const [showLoginNotice, setShowLoginNotice] = useState(false);

  // State cho form ·ª©ng tuy·ªÉn
  const [cvFile, setCvFile] = useState(null);
  const [coverLetter, setCoverLetter] = useState("");

  const [notif, setNotif] = useState({ show: false, type: "", content: "" });
  //hi·ªán th√¥ng b√°o
  const showNotification = (content, type = "success") => {
    setNotif({ show: true, type, content });
    setTimeout(() => setNotif({ show: false, type: "", content: "" }), 3000);
  };
  useEffect(() => {
    const fetchJobsId = async () => {
      try {
        // L·∫•y d·ªØ li·ªáu job
        const dataJobsItem = await createJobsId(id);
        setJob(dataJobsItem.data);
        // L·∫•y user t·ª´ localStorage
        const userData = localStorage.getItem("user");
        if (userData) {
          setUserApply(JSON.parse(userData));
        } else {
          setUserApply(null);
        }
      } catch (error) {
        console.error("L·ªói khi t·∫£i c√¥ng vi·ªác:", error);
      }
    };
    if (id) fetchJobsId();
  }, [id]);

  // H√†m n·ªôp ƒë∆°n
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!userApply || !job) return;
    // ‚úÖ Ki·ªÉm tra coverLetter
    if (!coverLetter || coverLetter.trim() === "") {
      alert("Gi·ªõi thi·ªáu ng·∫Øn g·ªçn v·ªÅ b·∫©n th√¢n!");
      return;
    }
    // ‚úÖ Ki·ªÉm tra file CV
    if (!cvFile) {
      alert("Vui l√≤ng ch·ªçn file CV!");
      return;
    }
    const formData = new FormData();
    formData.append("user_id", userApply._id);
    formData.append("job_id", job._id);
    formData.append("cover_letter", coverLetter);

    if (cvFile) {
      formData.append("cv_file", cvFile);
    }

    try {
      const result = await postJobApplication(formData);
      if (result.success) {
        showNotification("ƒê√£ ·ª©ng tuy·ªÉn th√†nh c√¥ng", "success");
        // alert("·ª®ng tuy·ªÉn th√†nh c√¥ng!");
        setShowApplyModal(false);
      } else {
        alert(result.message || "·ª®ng tuy·ªÉn th·∫•t b·∫°i!");
      }
      console.log("K·∫øt qu·∫£:", result);
    } catch (error) {
      console.error("L·ªói th√™m jobApplication:", error);
      alert("ƒê√£ x·∫£y ra l·ªói khi ·ª©ng tuy·ªÉn.");
    }
  };

  // Khi b·∫•m ·ª©ng tuy·ªÉn
  const handleApplyClick = () => {
    if (!userApply) {
      setShowLoginNotice(true); // N·∫øu ch∆∞a login ‚Üí hi·ªán th√¥ng b√°o
      return;
    }
    setShowApplyModal(true);
  };

  if (!job) return <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>;

  return (
    <>
      <Helmet>
        <title>{title}</title>
      </Helmet>

      {notif.show && (
        <NotificationBox
          type={notif.type}
          onClose={() => setNotif({ show: false, type: "", content: "" })}
        >
          {notif.content}
        </NotificationBox>
      )}
      <div className="job-details-container">
        <div className="job-summary-card">
          <div className="job-header">
            <img
              className="job-logo"
              src={job?.company_id.logo_url}
              alt={job.title}
            />
            <div className="job-header-text">
              <h2 className="job-title">{job.title || []}</h2>
              <p className="company-name">{job?.company_id.name || []}</p>
            </div>
          </div>

          <div className="job-meta">
            <div className="meta-item">
              V·ªã tr√≠ tuy·ªÉn d·ª•ng: {job.experience_level_id.experienceName || []}
            </div>
            <div className="meta-item">üìç ƒê·ªãa ch·ªâ: {job.location || []}</div>
            <div className="meta-item">
              L∆∞∆°ng: {job.salary_min}-{job.salary_max} tri·ªáu
            </div>
            <div className="meta-item">
              ‚åõH·∫°n n·ªôp h·ªì s∆°: {new Date(job.deadline).toLocaleDateString()}
            </div>
            <div className="meta-item">
              üïíNg√†y t·∫°o {new Date(job.created_at).toLocaleDateString()}
            </div>
          </div>

          <div className="job-meta job-metas">
            <h3>Th√¥ng tin c√¥ng vi·ªác:</h3>
            <div className="meta-item">
              Lƒ©nh v·ª±c: {job.category_id.name || []} ({job.skills || []})
            </div>
            <div className="meta-item">N∆°i l√†m vi·ªác: {job.location || []}</div>
            <div className="meta-item">
              H√¨nh th·ª©c l√†m vi·ªác:
              {job.formWork_id
                ? job.formWork_id.formWorkName
                : "Kh√¥ng x√°c ƒë·ªãnh"}
            </div>
            <div className="meta-item">
              Kinh nghi·ªám: {job.workExperience_id.label || []}
            </div>
            <div className="meta-item">
              L∆∞∆°ng: {job.salary_min}-{job.salary_max} tri·ªáu
            </div>
            <div className="meta-item">
              V·ªã tr√≠ tuy·ªÉn d·ª•ng: {job.experience_level_id.experienceName || []}
            </div>
            <div className="meta-item">
              üóìÔ∏è H·∫°n n·ªôp h·ªì s∆°: {new Date(job.deadline).toLocaleDateString()}
            </div>
          </div>

          <div className="job-meta job-metas">
            <h3>Th√¥ng tin c√¥ng ty:</h3>
            <div className="meta-item">
              T√™n c√¥ng ty: {job.company_id.name || []}
            </div>
            <div className="meta-item">
              Website: {job.company_id.website || []}
            </div>
            <div className="meta-item">
              ƒê·ªãa ch·ªâ:{job.company_id.location || []}
            </div>
            <div className="meta-item">
              SDT: {job.company_id.companies_Phone || []}
            </div>
            <div className="meta-item">
              M√£ s·ªë thu·∫ø: {job.company_id.tax_code || []}
            </div>
            <div className="meta-item">
              S·ªë nh√¢n vi√™n: {job.company_id.size || []}
            </div>
          </div>

          <div className="job-meta job-metas">
            <h3>M√¥ t·∫£ c√¥ng vi·ªác :</h3>
            <div className="meta-item">
              M√¥ t·∫£ c√¥ng vi·ªác: {job.description || []}
            </div>
            <div className="meta-item">
              Y√™u c·∫ßu ·ª©ng vi√™n: {job.requirements || []}
            </div>
            <div className="meta-item">Quy·ªÅn l·ª£i: {job.job_benefits || []}</div>
          </div>

          <div className="job-buttons">
            <button className="btn-apply" onClick={handleApplyClick}>
              ·ª®ng tuy·ªÉn ngay
            </button>
            <button className="btn-save">L∆∞u tin</button>
          </div>
        </div>
      </div>

      {/* Modal Apply (khi ƒë√£ login) */}
      {showApplyModal && userApply && (
        <div className="modal-overlay">
          <form
            className="modal-content"
            onSubmit={handleSubmit}
            encType="multipart/form-data"
          >
            <h2>·ª®ng tuy·ªÉn {job.title}</h2>
            <div className="apply-section-information">
              <h4>Th√¥ng tin ·ª©ng vi√™n</h4>
              <p>
                H·ªç v√† t√™n: <strong>{userApply.fullName}</strong>
              </p>
              <p>
                Email: <strong>{userApply.email}</strong>
              </p>
              <p>
                S·ªë ƒëi·ªán tho·∫°i: <strong>{userApply.phone}</strong>
              </p>
            </div>
            <div className="apply-section apload-file-container">
              <label>Ch·ªçn CV ƒë·ªÉ ·ª©ng tuy·ªÉn</label>
              <input
                type="file"
                accept=".pdf,.doc,.docx,.mp3"
                onChange={(e) => setCvFile(e.target.files[0])}
              />
            </div>
            CV t·ª± ch·ªçn CV online (Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ xem l·∫°i CV c·ªßa b·∫°n)
            <div className="apply-section">
              <label>Gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n</label>
              <textarea
                value={coverLetter}
                onChange={(e) => setCoverLetter(e.target.value)}
                placeholder="Vi·∫øt th∆∞ gi·ªõi thi·ªáu ng·∫Øn g·ªçn..."
              ></textarea>
            </div>
            <div className="modal-actions">
              <button
                type="button"
                className="btn-cancel"
                onClick={() => setShowApplyModal(false)}
              >
                H·ªßy
              </button>
              <button type="submit" className="btn-submit">
                N·ªôp h·ªì s∆° ·ª©ng tuy·ªÉn
              </button>

              <button
                type="button"
                className="btn-submits"
                onClick={() => navigate("/tao-cv")}
              >
                Ch∆∞a c√≥ CV? T·∫°o CV
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Modal Th√¥ng b√°o login (khi ch∆∞a login) */}
      {showLoginNotice && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h3>B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p</h3>
            <p>Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c ·ª©ng tuy·ªÉn c√¥ng vi·ªác n√†y.</p>
            <div className="modal-actions">
              <button
                className="btn-cancel"
                onClick={() => setShowLoginNotice(false)}
              >
                H·ªßy
              </button>
              <button
                className="btn-submit"
                onClick={() => navigate("/userLogin")}
              >
                ƒêƒÉng nh·∫≠p
              </button>
              <button
                className="btn-submit"
                onClick={() => navigate("/userRegister")}
              >
                ƒêƒÉng k√Ω
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

export default JobsItemId;
