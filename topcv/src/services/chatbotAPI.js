// Chatbot API Service
const API_BASE_URL = process.env.REACT_APP_CHATBOT_API || "http://localhost:3001";

export const chatbotAPI = {
  // G·ª≠i tin nh·∫Øn ƒë·∫øn chatbot
  sendMessage: async (message, type = 'ask') => {
    try {
      const endpoint = type === 'agent' ? '/agent' : '/chat';
      const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message,
          type,
          timestamp: new Date().toISOString(),
          sessionId:
            localStorage.getItem("chatSessionId") || generateSessionId(),
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Chatbot API error:", error);
      
      // Fallback to mock responses if API fails
      return getMockResponse(message);
    }
  },

  // L·∫•y l·ªãch s·ª≠ chat (n·∫øu c·∫ßn)
  getChatHistory: async (sessionId) => {
    try {
      const response = await fetch(
        `${API_BASE_URL}/chat/history/${sessionId}`
      );
      return await response.json();
    } catch (error) {
      console.error("Get chat history error:", error);
      throw error;
    }
  },

  // T·∫°o session m·ªõi
  createSession: async () => {
    try {
      const sessionId = generateSessionId();
      localStorage.setItem("chatSessionId", sessionId);
      return { sessionId };
    } catch (error) {
      console.error("Create session error:", error);
      throw error;
    }
  },
};

// Helper function t·∫°o session ID
const generateSessionId = () => {
  return (
    "chat_" +
    Date.now() +
    "_" +
    Math.random().toString(36).substr(2, 9)
  );
};

// Mock responses for fallback
const getMockResponse = (message) => {
  const responses = {
    'xin ch√†o': 'Ch√†o b·∫°n, c·∫ßn h·ªó tr·ª£ g√¨?',
    'hello': 'Hi, how can I help?',
    'gi√∫p t√¥i': 'B·∫°n c·∫ßn gi√∫p v·ªÅ vi·ªác l√†m hay CV?',
    'cv': 'B·∫°n mu·ªën t·∫°o m·ªõi hay c·∫£i thi·ªán CV?',
    'vi·ªác l√†m': 'B·∫°n t√¨m vi·ªác lƒ©nh v·ª±c n√†o?',
    'job': 'What field are you targeting?',
    't·∫°m bi·ªát': 'T·∫°m bi·ªát üëã',
    'bye': 'Goodbye üëã'
  };

  const lowerMessage = message.toLowerCase();
  let response = responses[lowerMessage];

  // T√¨m response g·∫ßn nh·∫•t
  if (!response) {
    for (const [key, value] of Object.entries(responses)) {
      if (lowerMessage.includes(key)) {
        response = value;
        break;
      }
    }
  }

  // Default response
  if (!response) {
    response = `Cho bi·∫øt b·∫°n mu·ªën t√¨m vi·ªác, t·∫°o CV hay h·ªèi g√¨ c·ª• th·ªÉ. + user message: ${message}`;
  }

  return {
    text: response,
    received: message,
    ts: new Date().toISOString()
  };
};
